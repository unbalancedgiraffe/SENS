=============================================================================
List of generated methods in project: SENS ver1

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "UART"      (component Serial_LDD)
   - UART_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.
   - UART_SendBlock -Sends a block of characters. The method returns ERR_BUSY when the previous block transmission is not 
                completed. Method <CancelBlockTransmission> can be used to cancel a transmit operation. This method is 
                available only if the transmitter property is enabled. This method finishes immediately after calling it - it 
                doesn't wait the end of data transmission. Use event <OnBlockSent> to check the end of data transmission or 
                method GetSentDataNum to check the state of sending.
   - UART_ReceiveBlock -Specifies the number of data to receive. The method returns ERR_BUSY until the specified number of 
                characters is received. Method <CancelBlockReception> can be used to cancel a running receive operation. If a 
                receive operation is not in progress (the method was not called or a previous operation has already finished) 
                all received characters will be lost without any notification. To prevent the loss of data call the method 
                immediately after the last receive operation has finished (e.g. from the <OnBlockReceived> event). This method 
                finishes immediately after calling it - it doesn't wait the end of data reception. Use event <OnBlockReceived> 
                to check the end of data reception or method GetReceivedDataNum to check the state of receiving.

Module "I2CFreedom" (component I2C_LDD)
   - I2CFreedom_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and 
                sets interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" 
                value then the device is also enabled(see the description of the Enable() method). In this case the Enable() 
                method is not necessary and needn't to be generated.    This method can be called only once. Before the second 
                call of Init() the Deinit() must be called first.
   - I2CFreedom_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address 
                must be specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target 
                slave address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. 
                The state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent 
                are not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2CFreedom_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - I2CFreedom_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or 
                general call value. Any send or receive method directs to or from selected device, until a new slave device is 
                selected by this method. This method is available for the MASTER mode.
   - I2CFreedom_GetError -Returns value of error mask, e.g. LDD_I2C_ARBIT_LOST.
   - I2CFreedom_CheckBus -This method returns the status of the bus. If the START condition has been detected, the method 
                returns LDD_I2C_BUSY. If the STOP condition has been detected, the method returns LDD_I2C_IDLE.
   - I2CFreedom_GetStats -Returns receive/transmit statistics.

Module "Cpu"       (component MKL46Z256LL4)
   - Cpu_SetClockConfiguration -Calling of this method will cause the clock configuration change and reconfiguration of all 
                components according to the requested clock configuration setting.
   - Cpu_GetClockConfiguration -Returns the active clock configuration identifier. The method is automatically enabled if more 
                than one clock configuration is enabled in the component.

===================================================================================
